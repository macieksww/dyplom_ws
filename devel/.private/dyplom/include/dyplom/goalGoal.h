// Generated by gencpp from file dyplom/goalGoal.msg
// DO NOT EDIT!


#ifndef DYPLOM_MESSAGE_GOALGOAL_H
#define DYPLOM_MESSAGE_GOALGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dyplom
{
template <class ContainerAllocator>
struct goalGoal_
{
  typedef goalGoal_<ContainerAllocator> Type;

  goalGoal_()
    : x(0.0)
    , y(0.0)
    , z(0.0)
    , ox(0.0)
    , oy(0.0)
    , oz(0.0)
    , ow(0.0)  {
    }
  goalGoal_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , z(0.0)
    , ox(0.0)
    , oy(0.0)
    , oz(0.0)
    , ow(0.0)  {
  (void)_alloc;
    }



   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _z_type;
  _z_type z;

   typedef double _ox_type;
  _ox_type ox;

   typedef double _oy_type;
  _oy_type oy;

   typedef double _oz_type;
  _oz_type oz;

   typedef double _ow_type;
  _ow_type ow;





  typedef boost::shared_ptr< ::dyplom::goalGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dyplom::goalGoal_<ContainerAllocator> const> ConstPtr;

}; // struct goalGoal_

typedef ::dyplom::goalGoal_<std::allocator<void> > goalGoal;

typedef boost::shared_ptr< ::dyplom::goalGoal > goalGoalPtr;
typedef boost::shared_ptr< ::dyplom::goalGoal const> goalGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dyplom::goalGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dyplom::goalGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dyplom::goalGoal_<ContainerAllocator1> & lhs, const ::dyplom::goalGoal_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.ox == rhs.ox &&
    lhs.oy == rhs.oy &&
    lhs.oz == rhs.oz &&
    lhs.ow == rhs.ow;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dyplom::goalGoal_<ContainerAllocator1> & lhs, const ::dyplom::goalGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dyplom

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dyplom::goalGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dyplom::goalGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dyplom::goalGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dyplom::goalGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dyplom::goalGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dyplom::goalGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dyplom::goalGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "92f979e6d381e46ba6174ad0f4e06da2";
  }

  static const char* value(const ::dyplom::goalGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x92f979e6d381e46bULL;
  static const uint64_t static_value2 = 0xa6174ad0f4e06da2ULL;
};

template<class ContainerAllocator>
struct DataType< ::dyplom::goalGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dyplom/goalGoal";
  }

  static const char* value(const ::dyplom::goalGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dyplom::goalGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#goal\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 ox\n"
"float64 oy\n"
"float64 oz\n"
"float64 ow\n"
;
  }

  static const char* value(const ::dyplom::goalGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dyplom::goalGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.ox);
      stream.next(m.oy);
      stream.next(m.oz);
      stream.next(m.ow);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct goalGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dyplom::goalGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dyplom::goalGoal_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<double>::stream(s, indent + "  ", v.z);
    s << indent << "ox: ";
    Printer<double>::stream(s, indent + "  ", v.ox);
    s << indent << "oy: ";
    Printer<double>::stream(s, indent + "  ", v.oy);
    s << indent << "oz: ";
    Printer<double>::stream(s, indent + "  ", v.oz);
    s << indent << "ow: ";
    Printer<double>::stream(s, indent + "  ", v.ow);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DYPLOM_MESSAGE_GOALGOAL_H
