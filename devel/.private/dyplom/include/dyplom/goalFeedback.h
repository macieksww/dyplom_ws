// Generated by gencpp from file dyplom/goalFeedback.msg
// DO NOT EDIT!


#ifndef DYPLOM_MESSAGE_GOALFEEDBACK_H
#define DYPLOM_MESSAGE_GOALFEEDBACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dyplom
{
template <class ContainerAllocator>
struct goalFeedback_
{
  typedef goalFeedback_<ContainerAllocator> Type;

  goalFeedback_()
    : a(0.0)
    , b(0.0)
    , c(0.0)
    , oa(0.0)
    , ob(0.0)
    , oc(0.0)
    , od(0.0)  {
    }
  goalFeedback_(const ContainerAllocator& _alloc)
    : a(0.0)
    , b(0.0)
    , c(0.0)
    , oa(0.0)
    , ob(0.0)
    , oc(0.0)
    , od(0.0)  {
  (void)_alloc;
    }



   typedef double _a_type;
  _a_type a;

   typedef double _b_type;
  _b_type b;

   typedef double _c_type;
  _c_type c;

   typedef double _oa_type;
  _oa_type oa;

   typedef double _ob_type;
  _ob_type ob;

   typedef double _oc_type;
  _oc_type oc;

   typedef double _od_type;
  _od_type od;





  typedef boost::shared_ptr< ::dyplom::goalFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dyplom::goalFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct goalFeedback_

typedef ::dyplom::goalFeedback_<std::allocator<void> > goalFeedback;

typedef boost::shared_ptr< ::dyplom::goalFeedback > goalFeedbackPtr;
typedef boost::shared_ptr< ::dyplom::goalFeedback const> goalFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dyplom::goalFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dyplom::goalFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dyplom::goalFeedback_<ContainerAllocator1> & lhs, const ::dyplom::goalFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.a == rhs.a &&
    lhs.b == rhs.b &&
    lhs.c == rhs.c &&
    lhs.oa == rhs.oa &&
    lhs.ob == rhs.ob &&
    lhs.oc == rhs.oc &&
    lhs.od == rhs.od;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dyplom::goalFeedback_<ContainerAllocator1> & lhs, const ::dyplom::goalFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dyplom

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dyplom::goalFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dyplom::goalFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dyplom::goalFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dyplom::goalFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dyplom::goalFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dyplom::goalFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dyplom::goalFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "33a401a71705fa7d50b405261e800c87";
  }

  static const char* value(const ::dyplom::goalFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x33a401a71705fa7dULL;
  static const uint64_t static_value2 = 0x50b405261e800c87ULL;
};

template<class ContainerAllocator>
struct DataType< ::dyplom::goalFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dyplom/goalFeedback";
  }

  static const char* value(const ::dyplom::goalFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dyplom::goalFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#feedback\n"
"float64 a\n"
"float64 b\n"
"float64 c\n"
"float64 oa\n"
"float64 ob\n"
"float64 oc\n"
"float64 od\n"
;
  }

  static const char* value(const ::dyplom::goalFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dyplom::goalFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.a);
      stream.next(m.b);
      stream.next(m.c);
      stream.next(m.oa);
      stream.next(m.ob);
      stream.next(m.oc);
      stream.next(m.od);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct goalFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dyplom::goalFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dyplom::goalFeedback_<ContainerAllocator>& v)
  {
    s << indent << "a: ";
    Printer<double>::stream(s, indent + "  ", v.a);
    s << indent << "b: ";
    Printer<double>::stream(s, indent + "  ", v.b);
    s << indent << "c: ";
    Printer<double>::stream(s, indent + "  ", v.c);
    s << indent << "oa: ";
    Printer<double>::stream(s, indent + "  ", v.oa);
    s << indent << "ob: ";
    Printer<double>::stream(s, indent + "  ", v.ob);
    s << indent << "oc: ";
    Printer<double>::stream(s, indent + "  ", v.oc);
    s << indent << "od: ";
    Printer<double>::stream(s, indent + "  ", v.od);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DYPLOM_MESSAGE_GOALFEEDBACK_H
